import streamlit as st
import pandas as pd
import plotly.express as px
from itertools import chain
import duckdb
import streamlit as st
import pandas as pd
import duckdb
import io
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload, MediaFileUpload
from google.oauth2 import service_account

import streamlit as st
import json
from google.oauth2 import service_account

# üî∫ ƒê·∫∑t l·ªánh set_page_config ·ªü d√≤ng ƒë·∫ßu ti√™n
st.set_page_config(page_title="Dashboard TikTok BI Tool", layout="centered")

# ========================
# Fuctions c·∫ßn thi·∫øt
# ========================


def clean_columns(df: pd.DataFrame, cols: list[str]) -> pd.DataFrame:
    for col in cols:
        df[col] = (
            df[col]
            .astype(str)  # chuy·ªÉn sang string ƒë·ªÉ x·ª≠ l√Ω
            .str.replace(r"[\t\r\n]", "", regex=True)  # b·ªè tab, xu·ªëng d√≤ng
            .str.strip()  # trim kho·∫£ng tr·∫Øng ƒë·∫ßu/cu·ªëi
        )
    return df


def preprocess_order(df: pd.DataFrame) -> pd.DataFrame:
    df.columns = df.columns.str.strip()
    # 1. Clean text cho c√°c c·ªôt th·ªùi gian v√† Order ID
    cols_to_clean = [
        "Created Time",
        "Order ID",
        "Paid Time",
        "RTS Time",
        "Shipped Time",
        "Delivered Time",
        "Cancelled Time",
    ]
    df = clean_columns(df, cols_to_clean)

    # 2. Chu·∫©n h√≥a Province (b·ªè ti·ªÅn t·ªë "T·ªânh", "Th√†nh ph·ªë")
    df["Province"] = (
        df["Province"]
        .str.replace(r"^(T·ªânh |Tinh )", "", regex=True)
        .str.replace(r"^(Thanh pho |Th√†nh ph·ªë |Th√†nh Ph·ªë )", "", regex=True)
        .str.strip()
    )

    # 3. Chu·∫©n h√≥a Country
    vietnam_aliases = [
        "Vi√™t Nam",
        "Vietnam",
        "The Socialist Republic of Viet Nam",
        "Socialist Republic of Vietnam",
    ]
    df["Country"] = df["Country"].replace(vietnam_aliases, "Vi·ªát Nam")

    # 4. Mapping t√™n t·ªânh/th√†nh
    province_mapping = {
        "Ba Ria‚Äì Vung Tau": "B√† R·ªãa - V≈©ng T√†u",
        "B√† R·ªãa-V≈©ng T√†u": "B√† R·ªãa - V≈©ng T√†u",
        "Ba Ria - Vung Tau": "B√† R·ªãa - V≈©ng T√†u",
        "Bac Giang": "B·∫Øc Giang",
        "Bac Lieu": "B·∫°c Li√™u",
        "Bac Ninh": "B·∫Øc Ninh",
        "Ben Tre": "B·∫øn Tre",
        "Binh Dinh": "B√¨nh ƒê·ªãnh",
        "Binh Duong": "B√¨nh D∆∞∆°ng",
        "Binh Duong Province": "B√¨nh D∆∞∆°ng",
        "Binh Phuoc": "B√¨nh Ph∆∞·ªõc",
        "Binh Thuan": "B√¨nh Thu·∫≠n",
        "Ca Mau": "C√† Mau",
        "Ca Mau Province": "C√† Mau",
        "Can Tho": "C·∫ßn Th∆°",
        "Ph·ªë C·∫ßn Th∆°": "C·∫ßn Th∆°",
        "Da Nang": "ƒê√† N·∫µng",
        "Da Nang City": "ƒê√† N·∫µng",
        "Ph·ªë ƒê√† N·∫µng": "ƒê√† N·∫µng",
        "Dak Lak": "ƒê·∫Øk L·∫Øk",
        "ƒê·∫Øc L·∫Øk": "ƒê·∫Øk L·∫Øk",
        "√ê·∫Øk N√¥ng": "ƒê·∫Øk N√¥ng",
        "ƒê·∫Øk N√¥ng": "ƒê·∫Øk N√¥ng",
        "Dak Nong": "ƒê·∫Øk N√¥ng",
        "Dong Nai": "ƒê·ªìng Nai",
        "Dong Nai Province": "ƒê·ªìng Nai",
        "Dong Thap": "ƒê·ªìng Th√°p",
        "Dong Thap Province": "ƒê·ªìng Th√°p",
        "Ha Nam": "H√† Nam",
        "Ha Noi": "H√† N·ªôi",
        "Ha Noi City": "H√† N·ªôi",
        "Ph·ªë H√† N·ªôi": "H√† N·ªôi",
        "Hai Phong": "H·∫£i Ph√≤ng",
        "Ph·ªë H·∫£i Ph√≤ng": "H·∫£i Ph√≤ng",
        "Ha Tinh": "H√† Tƒ©nh",
        "Hau Giang": "H·∫≠u Giang",
        "H√¥-Chi-Minh-Ville": "H·ªì Ch√≠ Minh",
        "Ho Chi Minh": "H·ªì Ch√≠ Minh",
        "Ho Chi Minh City": "H·ªì Ch√≠ Minh",
        "Kota Ho Chi Minh": "H·ªì Ch√≠ Minh",
        "Hoa Binh": "H√≤a B√¨nh",
        "Ho√† B√¨nh": "H√≤a B√¨nh",
        "Hung Yen": "H∆∞ng Y√™n",
        "Khanh Hoa": "Kh√°nh H√≤a",
        "Khanh Hoa Province": "Kh√°nh H√≤a",
        "Kh√°nh Ho√†": "Kh√°nh H√≤a",
        "Kien Giang": "Ki√™n Giang",
        "Ki·∫øn Giang": "Ki√™n Giang",
        "Long An Province": "Long An",
        "Nam Dinh": "Nam ƒê·ªãnh",
        "Nghe An": "Ngh·ªá An",
        "Ninh Binh": "Ninh B√¨nh",
        "Ninh Thuan": "Ninh Thu·∫≠n",
        "Quang Binh": "Qu·∫£ng B√¨nh",
        "Quang Tri": "Qu·∫£ng Tr·ªã",
        "Quang Nam": "Qu·∫£ng Nam",
        "Quang Ngai": "Qu·∫£ng Ng√£i",
        "Quang Ninh": "Qu·∫£ng Ninh",
        "Quang Ninh Province": "Qu·∫£ng Ninh",
        "Soc Trang": "S√≥c TrƒÉng",
        "Tay Ninh": "T√¢y Ninh",
        "Thai Binh": "Th√°i B√¨nh",
        "Thanh Hoa": "Thanh H√≥a",
        "Thanh Ho√°": "Thanh H√≥a",
        "Hai Duong": "H·∫£i D∆∞∆°ng",
        "Th·ª´a Thi√™n Hu·∫ø": "Th·ª´a Thi√™n-Hu·∫ø",
        "Thua Thien Hue": "Th·ª´a Thi√™n-Hu·∫ø",
        "Vinh Long": "Vƒ©nh Long",
        "Tra Vinh": "Tr√† Vinh",
        "Vinh Phuc": "Vƒ©nh Ph√∫c",
        "Cao Bang": "Cao B·∫±ng",
        "Lai Chau": "Lai Ch√¢u",
        "Ha Giang": "H√† Giang",
        "Lam Dong": "L√¢m ƒê·ªìng",
        "Lao Cai": "L√†o Cai",
        "Phu Tho": "Phu Tho",
        "Phu Yen": "Ph√∫ Y√™n",
        "Thai Nguyen": "Th√°i Nguy√™n",
        "Son La": "S∆°n La",
        "Tuyen Quang": "Tuy√™n Quang",
        "Yen Bai": "Y√™n B√°i",
        "Dien Bien": "ƒêi·ªán Bi√™n",
        "Tien Giang": "Ti·ªÅn Giang",
    }
    df["Province"] = df["Province"].replace(province_mapping)

    # 5. Chu·∫©n h√≥a SKU Category
    df["SKU Category"] = df["Seller SKU"]

    replacements = {
        r"^(COMBO-SC-ANHDUC|COMBO-SC-NGOCTRINH|COMBO-SC-MIX|SC_COMBO_MIX|SC_COMBO_MIX_LIVESTREAM|COMBO-SC_LIVESTREAM|SC_COMBO_MIX_01)$": "COMBO-SC",
        r"^SC_X1$": "SC-450g",
        r"^SC_X2$": "SC-x2-450g",
        r"^(SC_COMBO_X1|COMBO-CAYVUA-X1|SC_COMBO_X1_LIVESTREAM|COMBO-SCX1|COMBO-SCX1_LIVESTREAM)$": "COMBO-SCX1",
        r"^(SC_COMBO_X2|COMBO-SIEUCAY-X2|SC_COMBO_X2_LIVESTREAM|COMBO-SCX2|COMBO-SCX2_LIVESTREAM)$": "COMBO-SCX2",
        r"^(BTHP-Cay-200gr|BTHP_Cay)$": "BTHP-CAY",
        r"^(BTHP-200gr|BTHP_KhongCay)$": "BTHP-0CAY",
        r"^(BTHP_COMBO_MIX|BTHP003_combo_mix)$": "BTHP-COMBO",
        r"^(BTHP_COMBO_KhongCay|BTHP003_combo_kocay)$": "BTHP-COMBO-0CAY",
        r"^(BTHP_COMBO_Cay|BTHP003_combo_cay)$": "BTHP-COMBO-CAY",
        r"^BTHP-COMBO\+SC_X1$": "COMBO_BTHP_SCx1",
        r"^BTHP-COMBO\+SC_X2$": "COMBO_BTHP_SCx2",
        r"^BTHP_COMBO_MIX\+SC_X1$": "COMBO_BTHP_SCx1",
        r"^BTHP_COMBO_MIX\+SC_X2$": "COMBO_BTHP_SCx2",
        r"^(BTHP-2Cay-2KhongCay)$": "COMBO_4BTHP",
        r"^(BTHP-4Hu-KhongCay)$": "4BTHP_0CAY",
        r"^(BTHP-4Hu-Cay)$": "4BTHP_CAY",
    }

    for pattern, replacement in replacements.items():
        df["SKU Category"] = df["SKU Category"].str.replace(
            pattern, replacement, regex=True
        )

    df["Created_Timestamp"] = pd.to_datetime(
        df["Created Time"], format="%d/%m/%Y %H:%M:%S", errors="coerce"
    )
    df["Order_Month"] = df["Created_Timestamp"].dt.strftime("%Y-%m")

    return df


def preprocess_income(df_income: pd.DataFrame) -> pd.DataFrame:

    df_income.columns = df_income.columns.str.strip()
    df_income["ABS_Total_Fees"] = df_income["Total fees"].abs()
    df_income["Classify"] = (
        df_income["Related order ID"]
        .duplicated(keep=False)
        .map({True: "Duplicate", False: "Not Duplicate"})
    )
    df_income["Paydouble"] = df_income.duplicated(
        subset=["Related order ID", "Order/adjustment ID"], keep=False
    ).map({True: "Yes", False: "No"})
    df_income["Order/adjustment ID"] = df_income["Order/adjustment ID"].astype(
        str)
    df_income["Related order ID"] = df_income["Related order ID"].astype(str)
    df_income["OID_start7"] = (
        df_income["Order/adjustment ID"].astype(str).str.startswith("7")
    )
    df_income["Not_Order_Type"] = df_income["Type"].astype(str) != "Order"
    df_income["RID_count"] = df_income.groupby("Related order ID")[
        "Related order ID"
    ].transform("count")
    grouped = df_income.groupby("Related order ID")
    is_compensation = grouped["OID_start7"].transform("any") | grouped[
        "Not_Order_Type"
    ].transform("any")
    is_doublepaid = (df_income["RID_count"] > 1) & ~is_compensation
    df_income["Actually Order Type"] = "Normal"
    df_income.loc[is_compensation, "Actually Order Type"] = "Compensation"
    df_income.loc[is_doublepaid, "Actually Order Type"] = "DoublePaid"
    df_income.drop(
        columns=["OID_start7", "Not_Order_Type", "RID_count"], inplace=True)
    df_income["Order settled time"] = pd.to_datetime(
        df_income["Order settled time"], format="%Y/%m/%d", errors="coerce"
    ).dt.date

    return df_income


# L·∫•y service account t·ª´ secrets
try:
    service_account_raw = st.secrets["google"]["service_account"]
    service_account_info = json.loads(service_account_raw)
except Exception as e:
    st.error(f"‚ùå Kh√¥ng t√¨m th·∫•y ho·∫∑c l·ªói JSON trong secrets: {e}")
    st.stop()

# T·∫°o credentials
SCOPES = ["https://www.googleapis.com/auth/drive"]
credentials = service_account.Credentials.from_service_account_info(
    service_account_info, scopes=SCOPES
)

# K·∫øt n·ªëi Google Drive
drive_service = build("drive", "v3", credentials=credentials)
st.success("‚úÖ K·∫øt n·ªëi Google Drive th√†nh c√¥ng!")

FOLDER_ID = "114wWkA09hPYc5cHoX-sENZEYiOCu6Ae2"

# ========================
# 3Ô∏è‚É£ H√†m t·∫£i file t·ª´ Drive
# ========================


def download_parquet_from_drive(filename, folder_id=FOLDER_ID):
    """T√¨m file theo t√™n trong folder Drive, t·∫£i v·ªÅ v√† ƒë·ªçc b·∫±ng pandas."""
    query = f"'{folder_id}' in parents and name='{filename}' and trashed=false"
    results = drive_service.files().list(q=query, fields="files(id, name)").execute()
    items = results.get("files", [])

    if not items:
        return None

    file_id = items[0]["id"]
    request = drive_service.files().get_media(fileId=file_id)
    fh = io.BytesIO()
    downloader = MediaIoBaseDownload(fh, request)
    done = False
    while not done:
        status, done = downloader.next_chunk()
    fh.seek(0)
    return pd.read_parquet(fh)


def download_json_from_drive(filename, folder_id=FOLDER_ID):
    """T√¨m file theo t√™n trong folder Drive, t·∫£i v·ªÅ v√† ƒë·ªçc JSON."""
    query = f"'{folder_id}' in parents and name='{filename}' and trashed=false"
    results = drive_service.files().list(q=query, fields="files(id, name)").execute()
    items = results.get("files", [])

    if not items:
        return None

    file_id = items[0]["id"]
    request = drive_service.files().get_media(fileId=file_id)
    fh = io.BytesIO()
    downloader = MediaIoBaseDownload(fh, request)
    done = False
    while not done:
        status, done = downloader.next_chunk()

    fh.seek(0)
    content = fh.read()  # bytes
    return json.loads(content.decode("utf-8"))


# ========================
# 4Ô∏è‚É£ Giao di·ªán Streamlit
# ========================
st.markdown(
    """
    <div style='top: 60px; left: 40px; z-index: 1000;'>
        <img src='https://raw.githubusercontent.com/CaptainCattt/Report_of_shopee/main/logo-lamvlog.png' width='150'/>
    </div>
    """,
    unsafe_allow_html=True,
)

st.markdown(
    """
    <h2 style='text-align: center;
               background: linear-gradient(90deg, #FE2C55 0%, #25F4EE 100%);
               -webkit-background-clip: text;
               -webkit-text-fill-color: transparent;
               font-size: 48px;
               font-weight: bold;
               margin-bottom: 25px;
               font-family: Arial, Helvetica, sans-serif;'>
        Dashboard TikTok BI
    </h2>
    """,
    unsafe_allow_html=True,
)

# Session login
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False
if "username" not in st.session_state:
    st.session_state.username = ""

# H√†m check login


def check_login(input_user, input_pass):
    # gi·∫£ s·ª≠ ƒë√£ c√≥ download_json_from_drive
    users = download_json_from_drive("User.json")
    if not users:
        st.error("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file User.json tr√™n Drive")
        return False

    for u in users:
        if input_user.strip() == u.get("username", "").strip() and input_pass.strip() == u.get("password", "").strip():
            st.session_state.logged_in = True
            st.session_state.username = input_user
            return True

    st.error("‚ùå Sai username ho·∫∑c password")
    return False


# Form login
if not st.session_state.logged_in:
    with st.form("login_form"):
        st.subheader("ƒêƒÉng nh·∫≠p ƒë·ªÉ v√†o App")
        username = st.text_input("Username")
        password = st.text_input("Password", type="password")
        submit = st.form_submit_button("Login")
    if submit:
        check_login(username, password)

if st.session_state.logged_in:
    st.success(f"üëã Ch√†o m·ª´ng {st.session_state.username}!")

    # Kh·ªüi t·∫°o session_state m·∫∑c ƒë·ªãnh
    for key, val in {
        "auto_load_done": False,
        "df_order_drive": None,
        "df_income_drive": None,
        "is_loading": False,
        "load_refresh_type": "load"
    }.items():
        if key not in st.session_state:
            st.session_state[key] = val

    # =========================
    # N√∫t Load / Refresh
    # =========================
    if not st.session_state.is_loading and not st.session_state.auto_load_done:
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîé Load data", key="btn_load", use_container_width=True):
                st.session_state.load_refresh_type = "load"
                st.session_state.is_loading = True
        with col2:
            if st.button("üîÑ Refresh data", key="btn_refresh", use_container_width=True):
                st.session_state.load_refresh_type = "refresh"
                st.session_state.is_loading = True

    # =========================
    # Spinner khi ƒëang load
    # =========================
    if st.session_state.is_loading:
        action_text = "Refresh" if st.session_state.load_refresh_type == "refresh" else "Load"
        with st.spinner(f"‚è≥ {action_text} d·ªØ li·ªáu t·ª´ Google Drive..."):
            try:
                refresh = st.session_state.load_refresh_type == "refresh"
                order_df = download_parquet_from_drive("ALL_data_tiktok.parquet") \
                    if refresh or st.session_state.df_order_drive is None else st.session_state.df_order_drive
                income_df = download_parquet_from_drive("INCOME_all_data_tiktok.parquet") \
                    if refresh or st.session_state.df_income_drive is None else st.session_state.df_income_drive

                if order_df is not None and income_df is not None:
                    st.session_state.df_order_drive = order_df
                    st.session_state.df_income_drive = income_df
                    st.session_state.df_order = preprocess_order(order_df)
                    st.session_state.df_income = preprocess_income(income_df)

                    con = duckdb.connect(database=":memory:")
                    con.register("orders", st.session_state.df_order)
                    con.register("income", st.session_state.df_income)

                    st.success(
                        f"‚úÖ {action_text} d·ªØ li·ªáu th√†nh c√¥ng!\n\n"
                        f"üì¶ Orders: {len(st.session_state.df_order):,}\n"
                        f"üí∞ Income: {len(st.session_state.df_income):,}\n"
                        f"üïí C·∫≠p nh·∫≠t: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}"
                    )
                else:
                    st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu t·ª´ Drive!")
            except Exception as e:
                st.error(f"‚ùå L·ªói khi load d·ªØ li·ªáu: {e}")
            finally:
                st.session_state.is_loading = False
                st.session_state.auto_load_done = True

    # =========================
    # Th√¥ng b√°o n·∫øu ƒë√£ load
    # =========================
    if st.session_state.auto_load_done and not st.session_state.is_loading:
        st.info("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c load.")

    # =========================
    # L·∫•y d·ªØ li·ªáu ƒë·ªÉ s·ª≠ d·ª•ng
    # =========================
    order_df = st.session_state.df_order_drive
    income_df = st.session_state.df_income_drive

    # =========================

    if "df_order" in st.session_state and "df_income" in st.session_state:
        order = st.session_state.df_order
        income = st.session_state.df_income
        # df_joined = st.session_state.df_joined

        con = duckdb.connect(database=":memory:")
        con.register("orders", order)
        con.register("income", income)

        # Preview join ch·ªâ l·∫•y 10 b·∫£n ghi th√¥i
        df_preview = con.execute(
            """
            SELECT  o.*, i.*
            FROM orders o
            INNER JOIN income i
            ON o."Order ID" = i."Related order ID"
            ORDER BY o."Created Time" ASC
            LIMIT 10

        """
        ).fetchdf()

        st.session_state.df_preview = df_preview

        df_orders_by_month = con.execute(
            """
            SELECT
                strftime("Created_Timestamp", '%Y-%m') AS Order_Month,
                COUNT(DISTINCT "Order ID") AS "S·ªë ƒë∆°n h√†ng",
                COUNT(DISTINCT CASE WHEN "Order Status" = 'Canceled' THEN "Order ID" END) AS "S·ªë ƒë∆°n hu·ª∑",
                COUNT(DISTINCT CASE WHEN "Order Status" = 'Completed' THEN "Order ID" END) AS "S·ªë ƒë∆°n th√†nh c√¥ng"
            FROM orders
            GROUP BY strftime("Created_Timestamp", '%Y-%m')
            ORDER BY Order_Month
            """
        ).fetchdf()

        df_orders_by_month["Order_Month"] = pd.Categorical(
            df_orders_by_month["Order_Month"],
            categories=sorted(df_orders_by_month["Order_Month"].unique()),
            ordered=True,
        )

        st.session_state.df_orders_by_month = df_orders_by_month

        fig_orders_by_month = px.bar(
            df_orders_by_month,
            x="Order_Month",
            y=["S·ªë ƒë∆°n h√†ng", "S·ªë ƒë∆°n th√†nh c√¥ng", "S·ªë ƒë∆°n hu·ª∑"],
            barmode="group",
            title="üìä Th·ªëng k√™ ƒë∆°n h√†ng theo th√°ng",
            labels={
                "value": "S·ªë l∆∞·ª£ng",
                "Order_Month": "Th√°ng",
                "variable": "Lo·∫°i ƒë∆°n h√†ng",
            },
            color_discrete_map={
                "S·ªë ƒë∆°n h√†ng": "blue",
                "S·ªë ƒë∆°n th√†nh c√¥ng": "darkgreen",
                "S·ªë ƒë∆°n hu·ª∑": "red",
            },
        )
        fig_orders_by_month.update_xaxes(type="category")
        st.session_state.fig_orders_by_month = fig_orders_by_month

        sku_summary = con.execute(
            """
            SELECT
                "SKU Category",
                SUM(Quantity) AS "T·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m",
                SUM(CASE WHEN "Order Status" = 'Completed' THEN 1 ELSE 0 END) AS "S·∫£n ph·∫©m c·ªßa ƒë∆°n ho√†n th√†nh"
            FROM orders
            WHERE "SKU Category" IS NOT NULL
            GROUP BY "SKU Category"
            ORDER BY "T·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m" DESC
            """
        ).fetchdf()

        st.session_state.sku_summary = sku_summary

        fig_sku_summary = px.bar(
            sku_summary,
            x="SKU Category",
            y="T·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m",
            text="T·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m",
            title="üìä T·ªïng s·ªë l∆∞·ª£ng b√°n ra theo SKU üìä",
            color="SKU Category",
            height=600,
            width=800,
        )
        fig_sku_summary.update_traces(
            texttemplate="%{text:.2s}", textposition="outside")
        fig_sku_summary.update_layout(xaxis_tickangle=-45)

        st.session_state.fig_sku_summary = fig_sku_summary

        sku_monthly = con.execute(
            """
            SELECT
                strftime("Created_Timestamp", '%Y-%m') AS "Th√°ng",
                "SKU Category" AS "Lo·∫°i s·∫£n ph·∫©m",
                SUM(Quantity) AS "Total_Quantity",
                SUM(CASE WHEN "Order Status" = 'Completed' THEN 1 ELSE 0 END) AS "Completed_Orders"
            FROM orders
            WHERE "SKU Category" IS NOT NULL
            GROUP BY 1,2
            ORDER BY "Th√°ng", "Total_Quantity" DESC
            """
        ).fetchdf()

        st.session_state.sku_monthly = sku_monthly

        fig_sku_monthly = px.bar(
            sku_monthly,
            x="Th√°ng",
            y="Total_Quantity",
            color="Lo·∫°i s·∫£n ph·∫©m",
            barmode="group",
            text="Total_Quantity",
            title="üìä S·ªë l∆∞·ª£ng b√°n ra theo SKU Category t·ª´ng th√°ng üìä",
            height=600,
            width=1200,
        )
        fig_sku_monthly.update_traces(
            textposition="outside", texttemplate="%{text:,}")
        fig_sku_monthly.update_layout(
            xaxis_title="Th√°ng",
            yaxis_title="S·ªë l∆∞·ª£ng b√°n ra",
            legend_title="Lo·∫°i s·∫£n ph·∫©m",
            xaxis=dict(tickangle=-45, showgrid=True, type="category"),
            yaxis=dict(showgrid=True),
            font=dict(size=14),
        )

        st.session_state.fig_sku_monthly = fig_sku_monthly

        fig_pie_sku_summary = px.pie(
            sku_summary,
            names="SKU Category",
            values="T·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m",
            title="üì¶ T·ª∑ tr·ªçng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m theo SKU",
            hole=0.3,
        )

        fig_pie_sku_summary.update_traces(
            textinfo="percent+value",
            textfont_size=12,
            pull=[0.05] * len(sku_summary),
        )

        st.session_state.fig_pie_sku_summary = fig_pie_sku_summary

        income_by_month = con.execute(
            """
            SELECT
                strftime("Order settled time", '%Y-%m') AS Month,
                SUM(CAST("Total revenue" AS DOUBLE)) AS "Doanh thu",
                SUM(CAST("Total settlement amount" AS DOUBLE)) AS "Doanh thu th·ª±c nh·∫≠n"
            FROM income
            GROUP BY 1
            ORDER BY 1
            """
        ).fetchdf()

        # üëâ Th√™m c·ªôt format hi·ªÉn th·ªã ƒë·∫πp
        income_by_month["Doanh thu_fmt"] = income_by_month["Doanh thu"].apply(
            lambda x: f"{x:,.0f} ‚Ç´"
        )
        income_by_month["Doanh thu th·ª±c nh·∫≠n_fmt"] = income_by_month[
            "Doanh thu th·ª±c nh·∫≠n"
        ].apply(lambda x: f"{x:,.0f} ‚Ç´")

        st.session_state.income_by_month_pd = income_by_month[
            ["Month", "Doanh thu_fmt", "Doanh thu th·ª±c nh·∫≠n_fmt"]
        ]

        fig_income_by_month = px.bar(
            income_by_month,
            x="Month",
            y=["Doanh thu", "Doanh thu th·ª±c nh·∫≠n"],
            barmode="group",
            title="üìä Th·ªëng k√™ doanh thu theo th√°ng",
            labels={
                "value": "Total revenue",
                "Month": "Th√°ng",
            },
            color_discrete_map={
                "Doanh thu th·ª±c nh·∫≠n": "blue",
                "Doanh thu": "darkgreen",
            },
        )

        fig_income_by_month.update_yaxes(
            tickformat=",.0f", title="Doanh thu (‚Ç´)")
        fig_income_by_month.update_xaxes(type="category")

        st.session_state.fig_income_by_month = fig_income_by_month

        # --- N√∫t xu·∫•t Top 10 ng∆∞·ªùi mua ---
        with st.sidebar:
            st.write("### üèÜ Top 10 ng∆∞·ªùi mua nhi·ªÅu nh·∫•t üèÜ")

            if st.button("Xem Top 10 ng∆∞·ªùi mua"):
                query_top10_buyer = """
                    SELECT "Buyer Username", COUNT("Order ID") AS "Total orders"
                    FROM orders o
                    INNER JOIN income i
                    ON o."Order ID" = i."Related order ID"
                    WHERE "Order Status" = 'Completed' AND "Buyer Username" IS NOT NULL
                    GROUP BY "Buyer Username"
                    ORDER BY "Total orders" DESC
                    LIMIT 10
                """
                df_top10_buyers = con.execute(query_top10_buyer).fetchdf()
                st.session_state.df_top10_buyers = df_top10_buyers

                if "df_top10_buyers" in st.session_state:
                    st.dataframe(st.session_state.df_top10_buyers)

        # --- N√∫t xu·∫•t Top 10 t·ªânh th√†nh ---
        with st.sidebar:
            st.write("### üè¢ Top 10 t·ªânh th√†nh mua nhi·ªÅu nh·∫•t üè¢")

            if st.button("Xem Top 10 t·ªânh th√†nh"):
                query_top10_province = """
                    SELECT "Province", COUNT("Order ID") AS "Total orders"
                    FROM orders o
                    INNER JOIN income i
                    ON o."Order ID" = i."Related order ID"
                    WHERE "Order Status" = 'Completed' AND "Province" IS NOT NULL
                    GROUP BY "Province"
                    ORDER BY "Total orders" DESC
                    LIMIT 10
                """
                df_top10_province = con.execute(query_top10_province).fetchdf()
                st.session_state.df_top10_province = df_top10_province
                if "df_top10_province" in st.session_state:
                    st.dataframe(st.session_state.df_top10_province)

        # --- N√∫t xu·∫•t danh s√°ch d∆°n h√†ng ƒêi·ªÅu ch·ªânh ---
        with st.sidebar:
            st.write("### ‚ÄºÔ∏è Danh s√°ch ƒë∆°n h√†ng ƒêi·ªÅu ch·ªânh ‚ÄºÔ∏è")

            if st.button("Xem danh s√°ch"):
                query_ = """
                    SELECT "Order ID", "Type", "Order Status", "SKU Category", "Quantity", "Total revenue", "Total settlement amount", "Created Time"
                    FROM orders o
                    INNER JOIN income i
                    ON o."Order ID" = i."Related order ID"
                    WHERE "Actually Order Type" = 'Compensation' AND "Type" != 'Order'
                    ORDER BY "Created_Timestamp"
                    DESC
                    """
                df_ = con.execute(query_).fetchdf()
                st.session_state.df_ = df_
                if "df_" in st.session_state:
                    st.dataframe(st.session_state.df_)

            # --- Time-series Analysis ---
        with st.sidebar:
            st.write("### üåç Ph√¢n t√≠ch khu v·ª±c üåç")

            if st.button("Xem k·∫øt qu·∫£"):
                query_1 = """
                    SELECT o."Province",
                        COUNT(DISTINCT o."Order ID") AS "S·ªë ƒë∆°n h√†ng",
                        SUM(i."Total revenue") AS "Doanh thu",
                        AVG(CASE WHEN o."Cancelation/Return Type" = 'Return/Refund' THEN 1 ELSE 0 END) AS "T·ª∑ l·ªá hoaÃÄng hoaÃÄn"
                    FROM orders o
                    JOIN income i ON o."Order ID" = i."Related order ID"
                    GROUP BY o."Province"
                    ORDER BY "Doanh thu" DESC;
                    """
                df_1 = con.execute(query_1).fetchdf()
                df_1["Doanh thu"] = df_1["Doanh thu"].apply(
                    lambda x: f"{x:,.0f} ‚Ç´")
                st.session_state.df_1 = df_1
                if "df_1" in st.session_state:
                    st.dataframe(st.session_state.df_1)

        with st.sidebar:
            st.write("### üì¶ Ph√¢n t√≠ch s·∫£n ph·∫©m üì¶")

            if st.button("Xem ph√¢n t√≠ch"):
                query_2 = """
                    SELECT o."Product Name",
                            o."Seller SKU",
                            o."SKU Category",

                        COUNT(DISTINCT o."Order ID") AS "S·ªë ƒë∆°n h√†ng",
                        SUM(i."Total revenue") AS "Doanh thu",
                        SUM(CASE WHEN o."Cancelation/Return Type" = 'Return/Refund' THEN 1 ELSE 0 END) AS "S·ªë ƒë∆°n ho√†n tr·∫£",
                    FROM orders o
                    JOIN income i ON o."Order ID" = i."Related order ID"
                    GROUP BY o."Product Name", o."Seller SKU", o."SKU Category"
                    ORDER BY "Doanh thu" DESC

                    """
                df_2 = con.execute(query_2).fetchdf()
                df_2["Doanh thu"] = df_2["Doanh thu"].apply(
                    lambda x: f"{x:,.0f} ‚Ç´")
                st.session_state.df_2 = df_2
                if "df_2" in st.session_state:
                    st.dataframe(st.session_state.df_2)

        # --- Form t√¨m ki·∫øm Order ID ---
        with st.sidebar.form("search_order_form"):
            st.write("### üîç T√¨m ki·∫øm Order ID")
            order_id = st.text_input("Nh·∫≠p Order ID:", key="search_order_id")
            submit_btn = st.form_submit_button("T√¨m ki·∫øm")

            if submit_btn and order_id:
                query = f"""
                    SELECT *
                    FROM orders o
                    INNER JOIN income i
                    ON o."Order ID" = i."Related order ID"
                    WHERE "Order ID" = '{order_id}'
                """
                df_filtered = con.execute(query).fetchdf()
                st.session_state.df_search_result = df_filtered

            if "df_search_result" in st.session_state:
                df_filtered = st.session_state.df_search_result
                if not df_filtered.empty:
                    st.success(
                        f"ƒê√£ t√¨m th·∫•y {len(df_filtered)} b·∫£n ghi cho Order ID {order_id}"
                    )
                    st.dataframe(df_filtered)
                else:
                    st.warning(f"Kh√¥ng t√¨m th·∫•y Order ID {order_id}")

        # --- Form t√¨m ki·∫øm theo T·ªânh/Th√†nh ---
        with st.sidebar.form("search_city_form"):
            st.write("### üèôÔ∏è T√¨m ki·∫øm theo T·ªânh/Th√†nh")
            city = st.text_input("Nh·∫≠p T·ªânh/Th√†nh:", key="search_city")
            submit_city_btn = st.form_submit_button("T√¨m ki·∫øm")

            if submit_city_btn and city:
                query = f"""
                    SELECT "Order ID", "Order Status", "SKU Category", "Quantity", "Total revenue", "Total settlement amount", "Created Time", "Province", "Buyer Username"
                    FROM orders o
                    INNER JOIN income i
                    ON o."Order ID" = i."Related order ID"
                    WHERE "Order Status" = 'Completed' AND Province ILIKE '%{city}%'
                """
                df_filtered_city = con.execute(query).fetchdf()
                st.session_state.df_city_result = df_filtered_city

            if "df_city_result" in st.session_state:
                df_filtered_city = st.session_state.df_city_result
                if not df_filtered_city.empty:
                    st.success(
                        f"ƒê√£ t√¨m th·∫•y {len(df_filtered_city)} b·∫£n ghi t·∫°i {city}")
                    st.dataframe(df_filtered_city)
                else:
                    st.warning(f"Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†o t·∫°i {city}")

        # --- Form nh·∫≠p c√¢u l·ªánh SQL ---
        with st.form("sql_query_form"):
            sql_query = st.text_area("Nh·∫≠p c√¢u l·ªánh SQL:",
                                     height=200, key="sql_input")
            run_query = st.form_submit_button("Ch·∫°y query")

        if run_query and sql_query.strip():
            try:
                df_query = con.execute(sql_query).fetchdf()
                st.success(
                    f"‚úÖ Query ch·∫°y th√†nh c√¥ng! Tr·∫£ v·ªÅ {len(df_query)} d√≤ng.")
                st.dataframe(df_query)

                csv = df_query.to_csv(index=False).encode("utf-8")

                st.download_button(
                    label="üì• T·∫£i k·∫øt qu·∫£ CSV",
                    data=csv,
                    file_name="query_result.csv",
                    mime="text/csv",
                )

            except Exception as e:
                st.error(f"‚ùå L·ªói khi ch·∫°y query: {e}")

        # --- Form t√¨m ki·∫øm SKU ID ---
        with st.sidebar.form("search_sku_id_form"):
            st.write("### üîç T√¨m ki·∫øm SKU ID")
            sku_id = st.text_input("Nh·∫≠p SKU ID:", key="search_sku_id")
            submit_sku_btn = st.form_submit_button("T√¨m ki·∫øm")

            if submit_sku_btn and sku_id:
                query = f"""
                    SELECT "Order ID", "Order Status", "SKU Category", "Quantity", "Total revenue", "Total settlement amount", "Province", "Buyer Username"
                    FROM orders o
                    INNER JOIN income i
                    ON o."Order ID" = i."Related order ID"
                    WHERE "SKU ID" = '{sku_id}'
                """
                df_filtered_sku = con.execute(query).fetchdf()
                st.session_state.df_search_result_sku = df_filtered_sku

            if "df_search_result_sku" in st.session_state:
                df_filtered_sku = st.session_state.df_search_result_sku
                if not df_filtered_sku.empty:
                    st.success(
                        f"ƒê√£ t√¨m th·∫•y {len(df_filtered_sku)} b·∫£n ghi cho SKU ID {sku_id}"
                    )
                    st.dataframe(df_filtered_sku)
                else:
                    st.warning(f"Kh√¥ng t√¨m th·∫•y SKU ID {sku_id}")

        # --- Form t√¨m ki·∫øm OrderID t·ª´ t√™n kh√°ch h√†ng ---
        with st.sidebar.form("search_order_id_form_buyer"):
            st.write("### üîç T√¨m ki·∫øm Order ID t·ª´ t√™n Ng∆∞·ªùi mua")
            name_buyer = st.text_input(
                "Nh·∫≠p t√™n c·ªßa ng∆∞·ªùi mua:", key="search_name_buyer")
            submit_name_buyer = st.form_submit_button("T√¨m ki·∫øm")

            if submit_name_buyer and name_buyer:
                query = f"""
                    SELECT *
                    FROM orders o
                    INNER JOIN income i
                    ON o."Order ID" = i."Related order ID"
                    WHERE "Buyer Username" = '{name_buyer}'
                """
                df_filtered_buyer = con.execute(query).fetchdf()
                df_filtered_buyer_1 = df_filtered_buyer[
                    [
                        "Order ID",
                        "Order Status",
                        "SKU Category",
                        "Quantity",
                        "Total revenue",
                        "Total settlement amount",
                        "Created Time",
                        "Province",
                    ]
                ]
                st.session_state.df_filtered_buyer_1 = df_filtered_buyer_1

            if "df_filtered_buyer_1" in st.session_state:
                df_filtered_buyer = st.session_state.df_filtered_buyer_1
                if not df_filtered_buyer.empty:
                    st.success(
                        f"ƒê√£ t√¨m th·∫•y {len(df_filtered_buyer)} b·∫£n ghi Order ID cho ng∆∞·ªùi mua '{name_buyer}'"
                    )
                    st.dataframe(df_filtered_buyer)
                else:
                    st.warning(
                        f"Kh√¥ng t√¨m th·∫•y Order ID c·ªßa ng∆∞·ªùi mua '{name_buyer}'")

    # Hi·ªÉn th·ªã c√°c k·∫øt qu·∫£ t√¨m ki·∫øm
    if "df_preview" in st.session_state:
        st.markdown(
            "<h2 style='text-align: center; font-size: 28px; '>üìÖ Th√¥ng tin m·ªôt s·ªë ƒë∆°n h√†ng g·∫ßn nh·∫•t üìÖ</h2>",
            unsafe_allow_html=True,
        )

        st.dataframe(st.session_state.df_preview)

    # =========================
    st.markdown("<br><br><br>", unsafe_allow_html=True)

    # ƒêon h√†ng theo th√°ng
    if "df_orders_by_month" in st.session_state:
        st.markdown(
            "<h2 style='text-align: center; font-size: 28px;'>üìÖ Th·ªëng k√™ ƒë∆°n h√†ng theo th√°ng üìÖ</h2>",
            unsafe_allow_html=True,
        )

        st.dataframe(st.session_state.df_orders_by_month)

    # ƒê·ªì th·ªã ƒë∆°n h√†ng theo th√°ng
    if "fig_orders_by_month" in st.session_state:
        st.markdown(
            "<h2 style='text-align: center; font-size: 28px;'>üìä Th·ªëng k√™ ƒë∆°n h√†ng theo th√°ng üìä</h2>",
            unsafe_allow_html=True,
        )
        st.plotly_chart(st.session_state.fig_orders_by_month,
                        use_container_width=True)

    # Doanh thu theo th√°ng
    if "income_by_month_pd" in st.session_state:
        st.markdown(
            "<h2 style='text-align: center; font-size: 28px;'>üí∞ Doanh thu theo th√°ng üí∞</h2>",
            unsafe_allow_html=True,
        )
        st.dataframe(st.session_state.income_by_month_pd)

    # Doanh thu theo th√°ng - ƒë·ªì th·ªã
    if "fig_income_by_month" in st.session_state:
        st.markdown(
            "<h2 style='text-align: center; font-size: 28px; '>üìä Doanh thu theo th√°ng üìä</h2>",
            unsafe_allow_html=True,
        )
        st.plotly_chart(st.session_state.fig_income_by_month,
                        use_container_width=True)

    # T·ªïng s·ªë l∆∞·ª£ng b√°n ra theo SKU
    if "sku_summary" in st.session_state:
        st.markdown(
            "<h2 style='text-align: center; font-size: 28px; '>üì¶ T·ªïng s·ªë l∆∞·ª£ng b√°n ra theo SKU üì¶</h2>",
            unsafe_allow_html=True,
        )
        st.dataframe(st.session_state.sku_summary)

    # ƒê·ªì th·ªã t·ªïng s·ªë l∆∞·ª£ng b√°n ra theo SKU
    if "fig_sku_summary" in st.session_state:
        st.plotly_chart(st.session_state.fig_sku_summary,
                        use_container_width=True)

    # Bi·ªÉu ƒë·ªì tr√≤n t·ª∑ tr·ªçng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m theo SKU
    if "fig_pie_sku_summary" in st.session_state:
        st.markdown(
            "<h2 style='text-align: center; font-size: 28px; '>üìä T·ª∑ tr·ªçng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m theo SKU üìä</h2>",
            unsafe_allow_html=True,
        )
        st.plotly_chart(st.session_state.fig_pie_sku_summary,
                        use_container_width=True)

    # T·ªïng s·ªë l∆∞·ª£ng b√°n ra theo SKU Category m·ªói th√°ng
    if "sku_monthly" in st.session_state:
        st.markdown(
            "<h2 style='text-align: center; font-size: 26px; '>üì¶ T·ªïng s·ªë l∆∞·ª£ng b√°n ra theo SKU Category m·ªói th√°ng üì¶</h2>",
            unsafe_allow_html=True,
        )
        st.dataframe(st.session_state.sku_monthly)

    # ƒê·ªì th·ªã t·ªïng s·ªë l∆∞·ª£ng b√°n ra theo SKU Category m·ªói th√°ng
    if "fig_sku_monthly" in st.session_state:
        st.plotly_chart(st.session_state.fig_sku_monthly,
                        use_container_width=True)
